Welcome to SEE's Getting Started with Sphinx documentation!
===========================================================
**Getting Starting with Sphinx**

In this article, we'll be going through the basics of generating
documentation from docstrings in your Python code, checking your
documentation changes, and syncing your changes with a BitBucket
repository to automatically update ReadTheDocs.

**Step 1: Installing Sphinx**

You'll need to install *sphinx*. I found it easiest to install
using `pip <https://pypi.org/project/Sphinx/>`_.

.. code-block:: html
    :linenos:

    $ pip install sphinx


**Step 2: Setup your Project with Quickstart**

When you install the *sphinx* package, a number of command line
utilities are setup as well. One of those, 

.. code-block:: html
    :linenos:

    $ sphinx-quickstart

will generate a basic configuration file and directory
structure for your documentation.

Run this command at the base directory of your project 
(e.g. the BitBucket repo root). In my example, I have
set up a public BitBucket repo under my personal name
for development called "PublicAppVeyor". It will ask 
you a number of questions that will determine it's actions.

.. code-block:: html
    :linenos:

    Welcome to the Sphinx 2.4.4 quickstart utility.

    Please enter values for the following settings (just press Enter to
    accept a default value, if one is given in brackets).

    Selected root path: .

    You have two options for placing the build directory for Sphinx output.
    Either, you use a directory "_build" within the root path, or you separate
    "source" and "build" directories within the root path.
    > Separate source and build directories (y/n) [n]:     **y**   

    The project name will occur in several places in the built documentation.
    > Project name:     **Sphinx_Tutorial_Docs**
    > Author name(s):    **Emmie King**
    > Project release []:      **press enter to accept the default value**

    If the documents are to be written in a language other than English,
    you can select a language here by its language code. Sphinx will then
    translate text that it generates into that language.

    For a list of supported codes, see
    https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-language.
    > Project language [en]:     **en**

    Creating file .\source\conf.py.
    Creating file .\source\index.rst.
    Creating file .\Makefile.
    Creating file .\make.bat.

    Finished: An initial directory structure has been created.

    You should now populate your master file .\source\index.rst and create other documentation
    source files. Use the Makefile to build the docs, like so:
        make builder
    where "builder" is one of the supported builders, e.g. html, latex or linkcheck.


After the program has run, you'll notice that the following
files and folders have been created in "PublicAppVeyor":

* build folder
* source folder
* make.bat
* Makefile

I decided to create a new folder with the Project Name that you added above and
to create a new folder with the base name of the Project and append _py.

* Sphinx_Tutorial_Docs [for Sphinx documentation files]
* Sphinx_Tutorial_py [for python scripts]

I then moved the 2 sphinx folders and 2 sphinx files into Sphinx_Tutorial_Docs.

**Step 3: Adjusting the** ``conf.py`` **file**

The default ``conf.py`` file generated by the quickstart utility requires a few
changes.

**Tell Sphinx the location of your python package**

You will need to indicate in the ``conf.py`` file that Sphinx must go "up"
one directory level to the python package. Our ``conf.py`` file is located
in "PublicAppVeyor/Sphinx_Tutorial_Docs/source". Find the "Path setup"
section:

.. code-block:: html
    :linenos:

    # -- Path setup --------------------------------------------------------------

    # If extensions (or modules to document with autodoc) are in another directory,
    # add these directories to sys.path here. If the directory is relative to the
    # documentation root, use os.path.abspath to make it absolute, like shown here.
    #
    # import os
    # import sys
    # sys.path.insert(0, os.path.abspath('.'))

Uncomment the last 3 lines and replace the sys.path with the following AppVeyor server
directory structure.

.. code-block:: html
    :linenos:

    sys.path.insert(0, os.path.abspath('../..'))
    sys.path.insert(0, os.path.abspath('C:\\projects\\publicappveyor\\Sphinx_Tutorial_Docs'))
    sys.path.insert(0, os.path.abspath('C:\\projects\\publicappveyor\\Sphinx_Tutorial_py'))


**Add "Napoleon" to the list of Sphinx Extensions to use**

Out of the box, Sphinx only understands docstrings written in traditional
reStructuredText. The "Napoleon" extension enables Sphinx to understand docstrings 
written in 2 other popular formats: Numpy and Google.

Find the "General Configuration" section of your ``conf.py`` file.

.. code-block:: html
    :linenos:

    # -- General configuration ---------------------------------------------------

    # Add any Sphinx extension module names here, as strings. They can be
    # extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
    # ones.
    extensions = [
    ]

Replace the last line with:

.. code-block:: html
    :linenos:

    extensions = ['sphinx.ext.autodoc', 'sphinx.ext.coverage', 'sphinx.ext.napoleon', 'sphinx.ext.intersphinx']

**Step 4: Update** ``index.rst`` **file**

At this point, we can actually run the build process to generate our 
documentation but it would have the generic layout.

.. image:: _static/basic.png
    :width: 500px
    :align: center

To move forward, we will have to do some minor modifications to our
``index.rst`` file, which currently looks like this:

.. code-block::html
    :linenos:

    .. Sphinx_Tutorial_Docs documentation master file, created by
   sphinx-quickstart on Sat Mar 21 15:44:45 2020.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

    Welcome to Sphinx_Tutorial_Docs's documentation!
    ================================================

    .. toctree::
        :maxdepth: 2
        :caption: Contents:


    Indices and tables
    ==================

    * :ref:`genindex`
    * :ref:`modindex`
    * :ref:`search`

Let's start by getting rid of the comment at the top which is just noise:

.. code-block::html
    :linenos:

    Welcome to Sphinx_Tutorial_Docs's documentation!
    ================================================

    .. toctree::
        :maxdepth: 2
        :caption: Contents:

    Indices and tables
    ==================

    * :ref:`genindex`
    * :ref:`modindex`
    * :ref:`search`

The ``.. toctree::`` line is what Sphinx calls a **directive**.
We need to add *autodoc* directives to our ``index.rst`` file so 
that Sphinx knows what code objects we wish to use the autodoc
extension on.

Add the following code to indicate to Sphinx that it should 
document the public members of our ``main_OD.py`` module inside
the ``Sphinx_Tutorial_py/OD`` package:

.. code-block::html
    :linenos:

    Welcome to Sphinx_Tutorial_Docs's documentation!
    ================================================

    .. automodule:: Sphinx_Tutorial_py.OD.main_OD
        :members:

    .. toctree::
        :maxdepth: 2
        :caption: Contents:


**Step 5: Write your Docstrings**

``main_OD.py`` contains a couple of simple NumPy style
docstings that will be picked up by our *autodoc* directive.

**Step 6: Generate your Docs!**

Make sure that you are in the ``Sphinx_Tutorial_Docs`` directory
and execute the following command: ``make html``

You should see something like this:

.. code-block::html
    :linenos:

    Running Sphinx v2.4.4
    loading pickled environment... done
    building [mo]: targets for 0 po files that are out of date
    building [html]: targets for 1 source files that are out of date
    updating environment: 0 added, 1 changed, 0 removed
    reading sources... [100%] index
    looking for now-outdated files... none found
    pickling environment... done
    checking consistency... done
    preparing documents... done
    writing output... [100%] index
    generating indices...  genindex py-modindexdone
    writing additional pages...  searchdone
    copying images... [100%] _static/basic.png
    copying static files... ... done
    copying extra files... done
    dumping search index in English (code: en)... done
    dumping object inventory... done
    build succeeded.

    The HTML pages are in build\html.

Double click on ``Sphinx_Tutorial_Docs/build/html/index.html``
and you should see the ``main_OD.py`` example added to the generic
layout.

.. _MoreSet-pages:

==============
BitBucketSetup
==============

**Let's move on to** :doc:`setting up a BitBucket repository <../BitBucketSetup>`.

==============
AppVeyorSetup
==============

**Let's move on to** :doc:`setting up AppVeyor CI <../AppVeyorSetup>`.

===========
OD members
===========

**Orbit Determination members** :doc:`documentation <../OD_members>`.

===========
IOD members
===========

**Initial Orbit Determination members** :doc:`documentation <../IOD_members>`.

=================
OutputGen members
=================

**Output Generation members** :doc:`documentation <../OutputGen_members>`.


.. toctree::
   :maxdepth: 2
   :caption: Contents:


    BitBucketSetup
    AppVeyorSetup
    OD_members
    IOD_members
    OutputGen_members


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


Sphinx setup steps are from `medium.com <https://medium.com/@eikonomega/getting-started-with-sphinx-autodoc-part-1-2cebbbca5365>`_