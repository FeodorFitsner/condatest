# https://help.appveyor.com/discussions/questions/6802-appveyor-with-conda
build: false


environment: 
  matrix: 
    - PYTHON: "C:\\Python36-x64"
      MINICONDA: C:\Miniconda3

init: 
  - "ECHO %PYTHON_VERSION% %MINICONDA%"

install:
  - "set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%" 
  - conda config --set always_yes yes --set changeps1 no 
  - conda update -q conda 
  - conda env list
  - conda info -a 
  - conda config --add channels bashtage
  - conda config --add channels conda-forge
  - conda install arch -y
  - "conda create -q -n test-environment python=%PYTHON_VERSION% numpy python-dateutil pyparsing pytz tornado cycler tk libpng zlib freetype pandas ipython scipy flake8 tabulate matplotlib" 
  - activate matplotlib_build
  - activate test-environment 
  - python -m pip install --upgrade pip
  - conda install pyqt
  - pip install pywin32
  - pip install nbformat
  - pip install nbconvert
  - pip install jupyter_client
  - pip install ipykernel
  # - pip install ipython
  # - pip install pandas

test_script: 
#  - python run_all_tests.py
  - python ./tests/OrbitalElementsFromCartState_test.py
  - python ./tests/notebook_test.py

#on_success:
#  - "coveralls"
# https://packaging.python.org/guides/supporting-windows-using-appveyor/
#environment:

#  matrix:
#    global:
#        PYTHON: "C:\\conda"
#        MINICONDA_VERSION: "latest"
#        CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\emmieking\\windows_sdk.cmd"
#        PYTHON_ARCH: "64" # needs to be set for CMD_IN_ENV to succeed. If a mix
                          # of 32 bit and 64 bit builds are needed, move this
                          # to the matrix section.
#        CONDA_DEPENDENCIES: "python numpy jupyter pytest requests tabulate pandas pytest-cov coveralls flake8 matplotlib win32com"
#        TEST_CMD: "py.test tests"
    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

#    - PYTHON: "C:\\Python27"
#    - PYTHON: "C:\\Python33"
#    - PYTHON: "C:\\Python34"
#    - PYTHON: "C:\\Python35"
#    - PYTHON: "C:\\Python27-x64"
#    - PYTHON: "C:\\Python33-x64"
#      DISTUTILS_USE_SDK: "1"
#    - PYTHON: "C:\\Python34-x64"
#      DISTUTILS_USE_SDK: "1"
#    - PYTHON: "C:\\Python35-x64"
#    - PYTHON: "C:\\Python36-x64" #GREEN BUILD

# install:
# - set PATH=C:\Miniconda3;C:\Miniconda3\Scripts;%PATH%
# - "activate test"

# install:
  # We need wheel installed to build wheels
  # - "%PYTHON%\\python.exe -m pip install wheel"

#build:
#    only:
#    - master

# test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
#   - "build.cmd %PYTHON%\\python.exe setup.py test"
#    - "%PYTHON%\\python.exe setup.py tests"

#after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
#  - "build.cmd %PYTHON%\\python.exe setup.py bdist_wheel"

#artifacts:
  # bdist_wheel puts your built wheel in the dist directory
#  - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.


# https://github.com/astropy/ci-helpers
# AppVeyor.com is a Continuous Integration service to build and run tests under
# Windows
# environment:
#    global:
#        PYTHON: "C:\\conda"
#        MINICONDA_VERSION: "latest"
#        CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\emmieking\\windows_sdk.cmd"
#        PYTHON_ARCH: "64" # needs to be set for CMD_IN_ENV to succeed. If a mix
                          # of 32 bit and 64 bit builds are needed, move this
                          # to the matrix section.
        # TEST_CMD: "py.test tests"
        # CONDA_DEPENDENCIES: "python numpy jupyter pytest requests tabulate pandas pytest-cov coveralls flake8 matplotlib win32com"
        # PIP_DEPENDENCIES: "objgraph"

#    matrix:
#        - PYTHON_VERSION: "3.6"
#          NUMPY_VERSION: "stable"
#          CONDA_DEPENDENCIES: "python numpy jupyter pytest requests tabulate pandas pytest-cov coveralls flake8 matplotlib win32com"

#matrix:
#    fast_finish: true

# install:
    # Install Miniconda
#    - "git clone --bare . CI-builds"
#    - "powershell install-miniconda.ps1"

    # Set path again, need to find a way to avoid doing this again
#    
#    - "activate test"

    # Test that PATH is set correctly
#    - "conda --version"
#    - "python --version"

#test_script:
#    - "%CMD_IN_ENV% python setup.py test --readonly"
